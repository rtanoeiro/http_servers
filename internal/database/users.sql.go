// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const checkUserWithEmail = `-- name: CheckUserWithEmail :one
SELECT
    id,
    hashed_password,
    created_at,
    updated_at,
    is_chirpy_red
from users
where email = $1
`

type CheckUserWithEmailRow struct {
	ID             uuid.UUID
	HashedPassword string
	CreatedAt      time.Time
	UpdatedAt      time.Time
	IsChirpyRed    bool
}

func (q *Queries) CheckUserWithEmail(ctx context.Context, email string) (CheckUserWithEmailRow, error) {
	row := q.db.QueryRowContext(ctx, checkUserWithEmail, email)
	var i CheckUserWithEmailRow
	err := row.Scan(
		&i.ID,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsChirpyRed,
	)
	return i, err
}

const checkUserWithID = `-- name: CheckUserWithID :one
SELECT
    id,
    is_chirpy_red
from users
where id = $1
`

type CheckUserWithIDRow struct {
	ID          uuid.UUID
	IsChirpyRed bool
}

func (q *Queries) CheckUserWithID(ctx context.Context, id uuid.UUID) (CheckUserWithIDRow, error) {
	row := q.db.QueryRowContext(ctx, checkUserWithID, id)
	var i CheckUserWithIDRow
	err := row.Scan(&i.ID, &i.IsChirpyRed)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, email, hashed_password, is_chirpy_red)
VALUES (
    $1, $2, $3, $4, $5, false
)
RETURNING id, created_at, updated_at, email, hashed_password, is_chirpy_red
`

type CreateUserParams struct {
	ID             uuid.UUID
	CreatedAt      time.Time
	UpdatedAt      time.Time
	Email          string
	HashedPassword string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Email,
		arg.HashedPassword,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const deleteAllUsers = `-- name: DeleteAllUsers :exec
TRUNCATE TABLE users CASCADE
`

func (q *Queries) DeleteAllUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllUsers)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    updated_at = NOW(),
    email = $1,
    hashed_password = $2
WHERE id = $3

RETURNING id, created_at, updated_at, email, hashed_password, is_chirpy_red
`

type UpdateUserParams struct {
	Email          string
	HashedPassword string
	ID             uuid.UUID
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.Email, arg.HashedPassword, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const upgradeToChirpy = `-- name: UpgradeToChirpy :one

UPDATE users
set is_chirpy_red = true
where id = $1

RETURNING id
`

func (q *Queries) UpgradeToChirpy(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, upgradeToChirpy, id)
	err := row.Scan(&id)
	return id, err
}
